<?php

/*
 *
 *  __  __                        _
 * |  \/  | __ _ _   _ _   _ _ __(_)
 * | |\/| |/ _` | | | | | | | '__| |
 * | |  | | (_| | |_| | |_| | |  | |
 * |_|  |_|\__,_|\__, |\__,_|_|  |_|
 *               |___/
 *
 * Copyright (c) 2022-2023 Mayuri and contributors
 *
 * Permission is hereby granted to any persons and/or organizations
 * using this software to copy, modify, merge, publish, and distribute it.
 * Said persons and/or organizations are not allowed to use the software or
 * any derivatives of the work for commercial use or any other means to generate
 * income, nor are they allowed to claim this software as their own.
 *
 * The persons and/or organizations are also disallowed from sub-licensing
 * and/or trademarking this software without explicit permission from Mayuri.
 *
 * Any persons and/or organizations using this software must disclose their
 * source code and have it publicly available, include this license,
 * provide sufficient credit to the original authors of the project (IE: Mayuri),
 * as well as provide a link to the original project.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR
 * PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @author Mayuri
 *
 */

declare(strict_types=1);

namespace mayuri\form\elements\components;

use http\Exception\InvalidArgumentException;
use mayuri\form\elements\Element;
use pocketmine\form\FormValidationException;
use function gettype;
use function is_float;
use function is_int;

class Slider extends Element {
	/** @var float */
	protected float $min;
	/** @var float */
	protected float $max;
	/** @var float */
	protected float $step = 1.0;
	/** @var float */
	protected float $default;

	public function __construct(string $text, float $min, float $max, float $step = 1.0, ?float $default = null) {
		parent::__construct($text);
		if ($min > $max) {
			throw new InvalidArgumentException("\x53\x6c\x69\x64\x65\x72\x20\x6d\x69\x6e\x20\x76\x61\x6c\x75\x65\x20\x73\x68\x6f\x75\x6c\x64\x20\x62\x65\x20\x6c\x65\x73\x73\x20\x74\x68\x61\x6e\x20\x6d\x61\x78\x20\x76\x61\x6c\x75\x65");
		}
		$this->min = $min;
		$this->max = $max;
		if ($default !== null) {
			if ($default > $this->max || $default < $this->min) {
				throw new InvalidArgumentException("\x44\x65\x66\x61\x75\x6c\x74\x20\x6d\x75\x73\x74\x20\x62\x65\x20\x69\x6e\x20\x72\x61\x6e\x67\x65\x20" . $this->min . "\x20\x2e\x2e\x2e\x20" . $this->max);
			}
			$this->default = $default;
		} else {
			$this->default = $this->min;
		}
		if ($step <= 0) {
			throw new InvalidArgumentException("\x53\x74\x65\x70\x20\x6d\x75\x73\x74\x20\x62\x65\x20\x67\x72\x65\x61\x74\x65\x72\x20\x74\x68\x61\x6e\x20\x7a\x65\x72\x6f");
		}
		$this->step = $step;
	}

	public function getValue(): mixed {
		return parent::getValue(); // TODO: Change the autogenerated stub
	}

	public function getMin(): float {
		return $this->min;
	}

	public function getMax(): float {
		return $this->max;
	}

	public function getStep(): float {
		return $this->step;
	}

	public function getDefault(): float {
		return $this->default;
	}

	public function getType(): string {
		return "\x73\x6c\x69\x64\x65\x72";
	}

	public function serializeElementData(): array {
		return ["\x6d\x69\x6e" => $this->min, "\x6d\x61\x78" => $this->max, "\x64\x65\x66\x61\x75\x6c\x74" => $this->default, "\x73\x74\x65\x70" => $this->step];
	}

	public function validate(mixed $value): void {
		if (!is_int($value) && !is_float($value)) {
			throw new FormValidationException("\x45\x78\x70\x65\x63\x74\x65\x64\x20\x69\x6e\x74\x20\x6f\x72\x20\x66\x6c\x6f\x61\x74\x2c\x20\x67\x6f\x74\x20" . gettype($value));
		}
	}
}